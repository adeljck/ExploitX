package com.exploitx.controller.misc;

import com.exploitx.controller.MiscController;
import com.exploitx.core.Constants;
import com.exploitx.core.DecryptInterface;
import com.exploitx.core.ExploitInterface;
import com.exploitx.core.VulCheckTask;
import com.exploitx.tools.Tools;

import javafx.fxml.FXML;
import javafx.scene.control.*;


/**
 * @author yhy
 * @date 2021/7/3 13:15
 * @github https://github.com/yhy0
 */

// JavaFX图形化界面的控制类
public class DecryptController extends MiscController {
    @FXML
    private ChoiceBox<String> choice_decrypt;
    @FXML
    private TextArea basic_info;
    @FXML
    private TextField encoded_string;

    private DecryptInterface di;

    public static String BASICINFO = Constants.SECURITYSTATEMENT +

            "支持解密: \r\n" +
            "\t综合安防（仅windows） \r\n\n" +

            Constants.UPDATEINFO;

    public static String[] DecryptMethod = {
            "综合安防",
    };


    // 界面显示  一些默认的基本信息，漏洞列表、编码选项、线程、shell、页脚
    public void defaultInformation() {
        this.choice_decrypt.setValue(DecryptMethod[0]);
        for (String DMethod : DecryptMethod) {
            this.choice_decrypt.getItems().add(DMethod);
        }

    }

    // 基本信息
    public void basic() {
        // 切换界面保留原来的记录
        // 基本信息的历史记录
        if (history.containsKey("综合安防")) {
            this.encoded_string.setText((String) history.get("综合安防"));
        } else {
            this.basic_info.setText(BASICINFO);
        }
        this.basic_info.setWrapText(true);
    }

    // 点击检测，获取url 和 要检测的漏洞
    @FXML
    public void check() {
        String url = Tools.urlParse(this.encoded_string.getText().trim());
        history.put("密文", this.encoded_string.getText());
        String vulName = this.choice_decrypt.getValue().trim();

        history.put("解密平台", this.choice_decrypt.getValue());

        try {
                this.ei = Tools.getExploit(vulName);
                String result = this.ei.checkVul(url);

                this.basic_info.setText("\r\n\t" + result + "\r\n\r\n\twebPath:\r\n\t\t" + this.ei.getWebPath());

        } catch (Exception e) {
            this.basic_info.setText("\r\n\t检测异常 \r\n\t\t\t" + e.toString());
        }

        history.put("Struts2_ei", this.ei);

        history.put("Struts2_basic_info", this.basic_info.getText());

    }


    // 加载
    public void initialize() {
        try {
            this.defaultInformation();
            this.basic();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
