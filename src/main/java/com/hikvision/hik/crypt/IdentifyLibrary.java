package com.hikvision.hik.crypt;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;

public class IdentifyLibrary {
    public static native int identifyInit();

    public static native int identifyFini();

    public static native int identifyApply(byte[] bArr, int i, byte[] bArr2, int i2);

    public static native int identifyCheck(byte[] bArr, int i, byte[] bArr2, int i2);

    public static native int identifyApplyEx(byte[] bArr, int i, byte[] bArr2, int i2);

    public static native int identifyCheckEx(byte[] bArr, int i, int i2, byte[] bArr2, int i3);

    public static native int identifyItem(byte[] bArr, int i);

    public static native int exportAKSK(byte[] bArr, int i, byte[] bArr2, int i2);

    public static native int applySKByAK(byte[] bArr, int i, byte[] bArr2, int i2);

    public static native int EncryptData(byte[] bArr, int i, byte[] bArr2, int i2);

    public static native int DecryptData(byte[] bArr, int i, byte[] bArr2, int i2);

    public static native int ApplyByAKSK(byte[] bArr, int i, byte[] bArr2, int i2, byte[] bArr3, int i3, int i4);

    static {
        init();
    }

    private static void init() {
        try {
            InputStream stream = IdentifyLibrary.class.getClassLoader().getResourceAsStream("decrypt/hikvision/Identify.dll");
            if (stream == null) {
                throw new IOException("Not found library");
            }
            File tempFile = File.createTempFile("aaaa", ".dll");
            FileOutputStream fileOutputStream = new FileOutputStream(tempFile);
            Throwable th = null;
            try {
                byte[] tmp = new byte[65536];
                while (true) {
                    int size = stream.read(tmp);
                    if (size == -1) {
                        break;
                    }
                    fileOutputStream.write(tmp, 0, size);
                }
                if (fileOutputStream != null) {
                    if (0 != 0) {
                        try {
                            fileOutputStream.close();
                        } catch (Throwable th2) {
                            th.addSuppressed(th2);
                        }
                    } else {
                        fileOutputStream.close();
                    }
                }
                System.load(tempFile.getAbsolutePath());
                tempFile.deleteOnExit();
                identifyInit();
                Runtime.getRuntime().addShutdownHook(new Thread(IdentifyLibrary::identifyFini));
                if (stream != null) {
                    if (0 != 0) {
                        stream.close();
                    } else {
                        stream.close();
                    }
                }
            } finally {
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static byte[] decrypt(byte[] input) {
        byte[] tmp;
        int v;
        if (input != null && (v = DecryptData(input, input.length, (tmp = new byte[1024]), 1024)) >= 0) {
            return Arrays.copyOfRange(tmp, 0, v);
        }
        return null;
    }
}

